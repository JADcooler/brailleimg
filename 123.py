# -*- coding: utf-8 -*-
"""
Created on Sat May 28 22:30:32 2022

@author: jadej
"""

codes = [
  [int('11111111',2),'\u28FF'],
  [int('00000000',2),'\u2800'],
  [int('00010000',2),'\u2810'],
  [int('00000100',2),'\u2820'],
  [int('00010100',2),'\u2830'],
  [int('00000010',2),'\u2840'],
  [int('00010010',2),'\u2850'],
  [int('00000110',2),'\u2860'],
  [int('00010110',2),'\u2870'],
  [int('00000001',2),'\u2880'],
  [int('00010001',2),'\u2890'],
  [int('00000101',2),'\u28A0'],
  [int('00010101',2),'\u28B0'],
  [int('00000011',2),'\u28C0'],
  [int('00010011',2),'\u28D0'],
  [int('00000111',2),'\u28E0'],
  [int('00010111',2),'\u28F0'],
  [int('00000000',2),'\u2800'],
  [int('10000000',2),'\u2801'],
  [int('10010000',2),'\u2811'],
  [int('10000100',2),'\u2821'],
  [int('10010100',2),'\u2831'],
  [int('10000010',2),'\u2841'],
  [int('10010010',2),'\u2851'],
  [int('10000110',2),'\u2861'],
  [int('10010110',2),'\u2871'],
  [int('10000001',2),'\u2881'],
  [int('10010001',2),'\u2891'],
  [int('10000101',2),'\u28A1'],
  [int('10010101',2),'\u28B1'],
  [int('10000011',2),'\u28C1'],
  [int('10010011',2),'\u28D1'],
  [int('10000111',2),'\u28E1'],
  [int('10010111',2),'\u28F1'],
  [int('10010000',2),'\u2811'],
  [int('00100000',2),'\u2802'],
  [int('00110000',2),'\u2812'],
  [int('00100100',2),'\u2822'],
  [int('00110100',2),'\u2832'],
  [int('00100010',2),'\u2842'],
  [int('00110010',2),'\u2852'],
  [int('00100110',2),'\u2862'],
  [int('00110110',2),'\u2872'],
  [int('00100001',2),'\u2882'],
  [int('00110001',2),'\u2892'],
  [int('00100101',2),'\u28A2'],
  [int('00110101',2),'\u28B2'],
  [int('00100011',2),'\u28C2'],
  [int('00110011',2),'\u28D2'],
  [int('00100111',2),'\u28E2'],
  [int('00110111',2),'\u28F2'],
  [int('10100000',2),'\u2803'],
  [int('10110000',2),'\u2813'],
  [int('10100100',2),'\u2823'],
  [int('10110100',2),'\u2833'],
  [int('10100010',2),'\u2843'],
  [int('10110010',2),'\u2853'],
  [int('10100110',2),'\u2863'],
  [int('10110110',2),'\u2873'],
  [int('10100001',2),'\u2883'],
  [int('10110001',2),'\u2893'],
  [int('10100101',2),'\u28A3'],
  [int('10110101',2),'\u28B3'],
  [int('10100011',2),'\u28C3'],
  [int('10110011',2),'\u28D3'],
  [int('10100111',2),'\u28E3'],
  [int('10110111',2),'\u28F3'],
  [int('00001000',2),'\u2804'],
  [int('00011000',2),'\u2814'],
  [int('00001100',2),'\u2824'],
  [int('00011100',2),'\u2834'],
  [int('00001010',2),'\u2844'],
  [int('00011010',2),'\u2854'],
  [int('00001110',2),'\u2864'],
  [int('00011110',2),'\u2874'],
  [int('00001001',2),'\u2884'],
  [int('00011001',2),'\u2894'],
  [int('00001101',2),'\u28A4'],
  [int('00011101',2),'\u28B4'],
  [int('00001011',2),'\u28C4'],
  [int('00011011',2),'\u28D4'],
  [int('00001111',2),'\u28E4'],
  [int('00011111',2),'\u28F4'],
  [int('10001000',2),'\u2805'],
  [int('10011000',2),'\u2815'],
  [int('10001100',2),'\u2825'],
  [int('10011100',2),'\u2835'],
  [int('10001010',2),'\u2845'],
  [int('10011010',2),'\u2855'],
  [int('10001110',2),'\u2865'],
  [int('10011110',2),'\u2875'],
  [int('10001001',2),'\u2885'],
  [int('10011001',2),'\u2895'],
  [int('10001101',2),'\u28A5'],
  [int('10011101',2),'\u28B5'],
  [int('10001011',2),'\u28C5'],
  [int('10011011',2),'\u28D5'],
  [int('10001111',2),'\u28E5'],
  [int('10011111',2),'\u28F5'],
  [int('00101000',2),'\u2806'],
  [int('00111000',2),'\u2816'],
  [int('00101100',2),'\u2826'],
  [int('00111100',2),'\u2836'],
  [int('00101010',2),'\u2846'],
  [int('00111010',2),'\u2856'],
  [int('00101110',2),'\u2866'],
  [int('00111101',2),'\u2876'],
  [int('00101001',2),'\u2886'],
  [int('00111001',2),'\u2896'],
  [int('00101101',2),'\u28A6'],
  [int('00111101',2),'\u28B6'],
  [int('00101011',2),'\u28C6'],
  [int('00111011',2),'\u28D6'],
  [int('00101111',2),'\u28E6'],
  [int('00111111',2),'\u28F6'],
  [int('10101000',2),'\u2807'],
  [int('10111000',2),'\u2817'],
  [int('10101100',2),'\u2827'],
  [int('10111100',2),'\u2837'],
  [int('10101010',2),'\u2847'],
  [int('10111010',2),'\u2857'],
  [int('10101110',2),'\u2867'],
  [int('10111110',2),'\u2877'],
  [int('10101001',2),'\u2887'],
  [int('10111001',2),'\u2897'],
  [int('10101101',2),'\u28A7'],
  [int('10111101',2),'\u28B7'],
  [int('10101011',2),'\u28C7'],
  [int('10111011',2),'\u28D7'],
  [int('10101111',2),'\u28E7'],
  [int('10111111',2),'\u28F7'],
  [int('01000000',2),'\u2808'],
  [int('01010000',2),'\u2818'],
  [int('01000100',2),'\u2828'],
  [int('01010100',2),'\u2838'],
  [int('01000010',2),'\u2848'],
  [int('01010010',2),'\u2858'],
  [int('01000110',2),'\u2868'],
  [int('01010110',2),'\u2878'],
  [int('01000001',2),'\u2888'],
  [int('01010001',2),'\u2898'],
  [int('01000101',2),'\u28A8'],
  [int('01010101',2),'\u28B8'],
  [int('01000011',2),'\u28C8'],
  [int('01010011',2),'\u28D8'],
  [int('01000111',2),'\u28E8'],
  [int('01010111',2),'\u28F8'],
  [int('11000000',2),'\u2809'],
  [int('11010000',2),'\u2819'],
  [int('11000100',2),'\u2829'],
  [int('11010100',2),'\u2839'],
  [int('11000010',2),'\u2849'],
  [int('11010010',2),'\u2859'],
  [int('11000110',2),'\u2869'],
  [int('11010110',2),'\u2879'],
  [int('11000001',2),'\u2889'],
  [int('11010001',2),'\u2899'],
  [int('11000101',2),'\u28A9'],
  [int('11010101',2),'\u28B9'],
  [int('11000011',2),'\u28C9'],
  [int('11010011',2),'\u28D9'],
  [int('11000111',2),'\u28E9'],
  [int('11010111',2),'\u28F9'],
  [int('01100000',2),'\u280A'],
  [int('01110000',2),'\u281A'],
  [int('01100100',2),'\u282A'],
  [int('01110100',2),'\u283A'],
  [int('01100010',2),'\u284A'],
  [int('01110010',2),'\u285A'],
  [int('01100000',2),'\u286A'],
  [int('01110110',2),'\u287A'],
  [int('01100001',2),'\u288A'],
  [int('01110001',2),'\u289A'],
  [int('01100101',2),'\u28AA'],
  [int('01110101',2),'\u28BA'],
  [int('01100011',2),'\u28CA'],
  [int('01110011',2),'\u28DA'],
  [int('01100111',2),'\u28EA'],
  [int('01110111',2),'\u28FA'],
  [int('11100000',2),'\u280B'],
  [int('11110000',2),'\u281B'],
  [int('11100100',2),'\u282B'],
  [int('11110100',2),'\u283B'],
  [int('11100010',2),'\u284B'],
  [int('11110010',2),'\u285B'],
  [int('11100110',2),'\u286B'],
  [int('11110110',2),'\u287B'],
  [int('11100001',2),'\u288B'],
  [int('11110001',2),'\u289B'],
  [int('11100101',2),'\u28AB'],
  [int('11110101',2),'\u28BB'],
  [int('11100011',2),'\u28CB'],
  [int('11110011',2),'\u28DB'],
  [int('11100111',2),'\u28EB'],
  [int('11110111',2),'\u28FB'],
  [int('01001000',2),'\u280C'],
  [int('01011000',2),'\u281C'],
  [int('01001100',2),'\u282C'],
  [int('01011100',2),'\u283C'],
  [int('01001010',2),'\u284C'],
  [int('01011010',2),'\u285C'],
  [int('01001110',2),'\u286C'],
  [int('01011110',2),'\u287C'],
  [int('01001001',2),'\u288C'],
  [int('01011001',2),'\u289C'],
  [int('01001101',2),'\u28AC'],
  [int('01011101',2),'\u28BC'],
  [int('01001011',2),'\u28CC'],
  [int('01011011',2),'\u28DC'],
  [int('01001111',2),'\u28EC'],
  [int('01011111',2),'\u28FC'],
  [int('11001000',2),'\u280D'],
  [int('11011000',2),'\u281D'],
  [int('11001100',2),'\u282D'],
  [int('11011100',2),'\u283D'],
  [int('11001010',2),'\u284D'],
  [int('11011010',2),'\u285D'],
  [int('11001110',2),'\u286D'],
  [int('11011110',2),'\u287D'],
  [int('11001001',2),'\u288D'],
  [int('11011001',2),'\u289D'],
  [int('11001101',2),'\u28AD'],
  [int('11011101',2),'\u28BD'],
  [int('11001011',2),'\u28CD'],
  [int('11011011',2),'\u28DD'],
  [int('11001111',2),'\u28ED'],
  [int('11011111',2),'\u28FD'],
  [int('01101000',2),'\u280E'],
  [int('01111000',2),'\u281E'],
  [int('01101100',2),'\u282E'],
  [int('01111100',2),'\u283E'],
  [int('01101010',2),'\u284E'],
  [int('01111010',2),'\u285E'],
  [int('01101110',2),'\u286E'],
  [int('01111110',2),'\u287E'],
  [int('01101001',2),'\u288E'],
  [int('01111010',2),'\u289E'],
  [int('01101101',2),'\u28AE'],
  [int('01111101',2),'\u28BE'],
  [int('01101011',2),'\u28CE'],
  [int('01111011',2),'\u28DE'],
  [int('01101111',2),'\u28EE'],
  [int('01111111',2),'\u28FE'],
  [int('11101000',2),'\u280F'],
  [int('11111000',2),'\u281F'],
  [int('11101100',2),'\u282F'],
  [int('11111100',2),'\u283F'],
  [int('11101010',2),'\u284F'],
  [int('11111010',2),'\u285F'],
  [int('11101110',2),'\u286F'],
  [int('11111110',2),'\u287F'],
  [int('11101001',2),'\u288F'],
  [int('11111001',2),'\u289F'],
  [int('11101101',2),'\u28AF'],
  [int('11111101',2),'\u28BF'],
  [int('11101011',2),'\u28CF'],
  [int('11111011',2),'\u28DF'],
  [int('11101111',2),'\u28EF'],
    
  
 ]


dicter={}
for i in codes:
    dicter[i[0]]=i[1]
print(dicter)


from PIL import Image, ImageOps
#input image
img = Image.open('luffy.jpg')#.rotate(-90,expand=True)
#img.save('greyscale.png')
width = 150
height = 150
im=img
# Resize input image while keeping aspect ratio
ratio = height / im.height
im = im.resize((int(im.width * ratio), height))

# Border parameters
fill_color = (255, 255, 255)
border_l = int((width - im.width) / 2)

# Approach #1: Use ImageOps.expand()
border_r = width - im.width - border_l
im_1 = ImageOps.expand(im, (border_l, 0, border_r, 0), (255,255,255))
im_1.save('approach_1.png')

img= Image.open('approach_1.png').convert('L')
print(img.size)
pixels=img.load()


h,w = img.size
#print(img.mode)
#print(pixels)

for i in range(h):
    for j in range(w):
        s=pixels[i,j]
        pixels[i,j]= 255 if abs(s) <abs(s-255) else 0#

def imgtobin(picbrail):
    #convert the braille-like rectangle component of picture to binary to compare with braille characters
    c=0
    d=2**7
    for i in picbrail:
        if(i==255):
            c+=d
        d/=2
    #print(c)
    return c

def flip(num,x):
    if(x>128):
        return num
    
    if(num&x==0):        
        return num+x
    else:
        return num-x


counterglobal=0
counterconflict=0
def distance(inp):
    global counterconflict
    print("conflict",counterconflict)
    counterconflict+=1
    f=0
    l=0
    c=1
    pos=[]
    inp=int(inp)
    sinp=inp
    print(inp)
    print("{0:b}".format(inp))
    print(inp)
    while(sinp):        
        dig=sinp&1
        if(dig==1):
            if(f==0):
                f=c
            l=c
        c*=2
        sinp>>=1
    print(inp)
    a=[1,0,-1]
    for i in a:
        s=flip(inp,int(pow(2,i)*l))
        print("flipping",l,"with ",int(pow(2,i)*l),"result is ",s)
        
        if(s!=inp):
           pos.append(s)
        s=flip(inp,int(pow(2,i)*f))
        print("flipping",f,"with ",int(pow(2,i)*f),"result is ",s)
        if(s!=inp):
           pos.append(s)
        
    print("init = {0:b}".format(inp))
    for i in pos:
        print(i," : {0:b}".format(i))
        if(i in dicter):
            return i
    
    global counterglobal
    print("match faled",counterglobal)
    counterglobal+=1
    return '\u28ff'
    #"{0:b}".format(37)
outputfile= open('result.txt','w', encoding="utf-8")
outputfile.truncate()
for i in range(0,h-4,4): 
    for j in range(0,w-2,2):                
        pixelbraille=[]
        for x in range(2):
            for y in range(4):
                pixelbraille.append(pixels[j+x,i+y])
        
        #print(pixelbraille,imgtobin(pixelbraille),end=' ')        
        x=imgtobin(pixelbraille)
        #the else condition here would be the fututre distance function
        print(dicter[x],end='',file = outputfile) if x in dicter else print(dicter[distance(x)],end='',file = outputfile) 
    print('',file=outputfile) 

#
#for i in range(0,h-4,4): 
#    for j in range(0,w-2,2):               
#
       

s='\u28FF'
img.save('result.png')
#print(codes)

